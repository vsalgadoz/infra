---
- hosts: Proxmox
  tasks:
    - name: Validar que no exista '{{ vname }}'
      proxmox_kvm:
        api_user: "{{ user }}"
        api_password: "{{ password }}"
        api_host: '{{ proxmox_server }}'
        name: '{{ vname }}'
        node: '{{ proxmox_node }}'
        state: current
      register: result
      ignore_errors: True
              
    - name: Clonar del source hacia '{{ vname }}'
      proxmox_kvm:
        api_user    : "{{ user }}"
        api_password: "{{ password }}"
        api_host    : '{{ proxmox_server }}'
        clone       : '{{ source }}'   # The VM source
        name        : '{{ vname }}'
        node        : '{{ proxmox_node }}'
        storage     : local
        format      : qcow2
        timeout     : 500  # Note: The task can take a while. Adapt
        
    - name: Pausa de 30 seg. en lo que se crea la MV
      pause:
        seconds: 30
        
    - name: Arrancar la maquina virtual recien creada '{{ vname }}'
      proxmox_kvm:
         api_user: "{{ user }}"
         api_password: "{{ password }}"
         api_host: '{{ proxmox_server }}'
         name: '{{ vname }}'
         node: '{{ proxmox_node }}'
         state      : started
         
    - name: Pausa de 30 segundos para que terminen de cargar los servicios
      pause:
        seconds: 30
         
    - name: Cambiar nombre de host
      shell: ID=$(qm list | grep -Ei "{{ vname }}" | awk '{print $1}'); qm guest exec  $ID -- hostnamectl set-hostname  "{{ vmhostname }}" 
    
    - name: Establecer IP
      shell: ID=$(qm list | grep -Ei "{{ vname }}" | awk '{print $1}'); IF=$(qm guest exec $ID -- nmcli -t device | jq -r '."out-data"' | grep -Ei "ethernet" | head -1 | cut -d ":" -f 1); qm guest exec $ID -- nmcli con mod $IF ipv4.addresses  "{{ vmipaddr }}"/24
    
    - name: Establecer Gateway
      shell: ID=$(qm list | grep -Ei "{{ vname }}" | awk '{print $1}'); IF=$(qm guest exec $ID -- nmcli -t device | jq -r '."out-data"' | grep -Ei "ethernet" | head -1 | cut -d ":" -f 1); qm guest exec $ID -- nmcli con mod  $IF ipv4.gateway  "{{ vmgateway }}"
    
    - name: Establecer Modo Est√°tico
      shell: ID=$(qm list | grep -Ei "{{ vname }}" | awk '{print $1}'); IF=$(qm guest exec $ID -- nmcli -t device | jq -r '."out-data"' | grep -Ei "ethernet" | head -1 | cut -d ":" -f 1); qm guest exec $ID -- nmcli con mod $IF ipv4.method manual
   
    - name: Establecer DNS
      shell: ID=$(qm list | grep -Ei "{{ vname }}" | awk '{print $1}'); IF=$(qm guest exec $ID -- nmcli -t device | jq -r '."out-data"' | grep -Ei "ethernet" | head -1 | cut -d ":" -f 1); qm guest exec $ID -- nmcli con mod $IF ipv4.dns  "{{ vmdnsname }}"

    - name: Establecer Dominio
      shell: ID=$(qm list | grep -Ei "{{ vname }}" | awk '{print $1}'); IF=$(qm guest exec $ID -- nmcli -t device | jq -r '."out-data"' | grep -Ei "ethernet" | head -1 | cut -d ":" -f 1); qm guest exec $ID -- nmcli con mod $IF ipv4.dns-search "{{ vmdomain }}"

    - name: Detener Red
      shell: ID=$(qm list | grep -Ei "{{ vname }}" | awk '{print $1}'); IF=$(qm guest exec $ID -- nmcli -t device | jq -r '."out-data"' | grep -Ei "ethernet" | head -1 | cut -d ":" -f 1); qm guest exec $ID -- nmcli con down $IF

    - name: Iniciar Red
      shell: ID=$(qm list | grep -Ei "{{ vname }}" | awk '{print $1}'); IF=$(qm guest exec $ID -- nmcli -t device | jq -r '."out-data"' | grep -Ei "ethernet" | head -1 | cut -d ":" -f 1); qm guest exec $ID -- nmcli con up $IF

        
     
